// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Parser$ReasonSuperTinyCompiler = require("../src/Parser.bs.js");

Jest.describe("Parsers", (function (param) {
        Jest.describe("errors", (function (param) {
                return Jest.test("should be nice", (function (param) {
                              var error = Parser$ReasonSuperTinyCompiler.ParseError[/* toString */4](Parser$ReasonSuperTinyCompiler.Parsers[/* get_error */5](Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("abx"), "abra")));
                              return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](error), "Expected: abx at line 1, column 1");
                            }));
              }));
        Jest.describe("string", (function (param) {
                Jest.test("success", (function (param) {
                        var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("abr"), "abra");
                        return Jest.Expect[/* toBe */2]("abr", Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)));
                      }));
                return Jest.test("failure", (function (param) {
                              return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                                                return Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("abx"), "abra"));
                                              })));
                            }));
              }));
        Jest.describe("orElse", (function (param) {
                var p = Parser$ReasonSuperTinyCompiler.Parsers[/* orElse */7](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("aa"), Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("bb"));
                Jest.test("success first branch", (function (param) {
                        var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aabra");
                        return Jest.Expect[/* toBe */2]("aa", Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)));
                      }));
                Jest.test("success second branch", (function (param) {
                        var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "bbra");
                        return Jest.Expect[/* toBe */2]("bb", Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)));
                      }));
                return Jest.test("failure", (function (param) {
                              var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "abbra");
                              return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.ParseError[/* getAllStackTrace */3](Parser$ReasonSuperTinyCompiler.Parsers[/* get_error */5](result))), /* array */[
                                          "Expected: bb at line 1, column 1",
                                          "Expected: aa at line 1, column 1"
                                        ]);
                            }));
              }));
        Jest.describe("flatMap", (function (param) {
                var p = Parser$ReasonSuperTinyCompiler.Parsers[/* flatMap */8](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("aa"), (function (param) {
                        return Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("bb");
                      }));
                Jest.test("success", (function (param) {
                        var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aabb");
                        return Jest.Expect[/* toBe */2]("bb", Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)));
                      }));
                return Jest.test("failure", (function (param) {
                              var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aaabb");
                              return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.ParseError[/* getAllStackTrace */3](Parser$ReasonSuperTinyCompiler.Parsers[/* get_error */5](result))), /* array */["Expected: bb at line 1, column 3"]);
                            }));
              }));
        Jest.test("unit", (function (param) {
                var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](Parser$ReasonSuperTinyCompiler.Parsers[/* unit */9](1), "abra");
                return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)), 1);
              }));
        Jest.describe("many", (function (param) {
                var p = Parser$ReasonSuperTinyCompiler.Parsers[/* many */11](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("aa"));
                Jest.test("aaaa", (function (param) {
                        return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aaaa"))), /* array */[
                                    "aa",
                                    "aa"
                                  ]);
                      }));
                Jest.test("aa", (function (param) {
                        return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aa"))), /* array */["aa"]);
                      }));
                return Jest.test("no input", (function (param) {
                              return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, ""))), /* array */[]);
                            }));
              }));
        Jest.describe("many1", (function (param) {
                var p = Parser$ReasonSuperTinyCompiler.Parsers[/* many1 */12](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("a"));
                Jest.test("success", (function (param) {
                        var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aabb");
                        return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)), /* array */[
                                    "a",
                                    "a"
                                  ]);
                      }));
                return Jest.test("failure", (function (param) {
                              var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "bb");
                              return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.ParseError[/* getAllStackTrace */3](Parser$ReasonSuperTinyCompiler.Parsers[/* get_error */5](result))), /* array */["Expected at least one repetition for parser at line 1, column 1"]);
                            }));
              }));
        Jest.test("slice", (function (param) {
                var p = Parser$ReasonSuperTinyCompiler.Parsers[/* slice */13](Parser$ReasonSuperTinyCompiler.Parsers[/* many1 */12](Parser$ReasonSuperTinyCompiler.Parsers[/* string */6]("a")));
                var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "aaabb");
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)), "aaa");
              }));
        return Jest.test("regex", (function (param) {
                      var p = Parser$ReasonSuperTinyCompiler.Parsers[/* regex */14]("a(b)c?ra?");
                      var result = Parser$ReasonSuperTinyCompiler.Parsers[/* run */1](p, "abrcaaaaa");
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Parser$ReasonSuperTinyCompiler.Parsers[/* get_exn */4](result)), /* array */[
                                  "abr",
                                  "b"
                                ]);
                    }));
      }));

/*  Not a pure module */
