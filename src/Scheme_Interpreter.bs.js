// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE

import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_exceptions from "../node_modules/bs-platform/lib/es6/caml_exceptions.js";

function showVal(lisp) {
  if (typeof lisp === "number") {
    if (lisp === 0) {
      return "#t";
    } else {
      return "#f";
    }
  } else {
    switch (lisp.tag | 0) {
      case 0 : 
          return lisp[0];
      case 1 : 
          return lisp[0].toString();
      case 2 : 
          return "\"" + (lisp[0] + "\"");
      case 3 : 
          return "(" + (lisp[0].map(showVal).join(" ") + ")");
      case 4 : 
          return "(" + (lisp[0] + (" " + (lisp[1].map(showVal).join(" ") + ")")));
      
    }
  }
}

var RuntimeError = Caml_exceptions.create("Scheme_Interpreter-ReasonSuperTinyCompiler.RuntimeError");

function binNumOp(impl, params) {
  var exit = 0;
  if (params.length !== 2) {
    exit = 1;
  } else {
    var a = params[0];
    var exit$1 = 0;
    if (typeof a === "number" || a.tag !== 1) {
      exit$1 = 2;
    } else {
      var b = params[1];
      if (typeof b === "number") {
        throw [
              RuntimeError,
              showVal(b) + " must be a number"
            ];
      } else if (b.tag === 1) {
        return /* Number */Block.__(1, [Curry._2(impl, a[0], b[0])]);
      } else {
        throw [
              RuntimeError,
              showVal(b) + " must be a number"
            ];
      }
    }
    if (exit$1 === 2) {
      var match = params[1];
      if (typeof match === "number" || match.tag !== 1) {
        exit = 1;
      } else {
        throw [
              RuntimeError,
              showVal(a) + " must be a number"
            ];
      }
    }
    
  }
  if (exit === 1) {
    throw [
          RuntimeError,
          showVal(/* List */Block.__(3, [params])) + " must be binary number list"
        ];
  }
  
}

function if_($$eval, params) {
  var exit = 0;
  if (params.length !== 3) {
    exit = 1;
  } else {
    var match = params[0];
    if (typeof match === "number") {
      if (match !== 0) {
        return Curry._1($$eval, params[2]);
      } else {
        return Curry._1($$eval, params[1]);
      }
    } else {
      exit = 1;
    }
  }
  if (exit === 1) {
    throw [
          RuntimeError,
          showVal(/* List */Block.__(3, [params])) + " must be"
        ];
  }
  
}

function $$eval(lisp) {
  if (typeof lisp === "number" || lisp.tag !== 4) {
    return lisp;
  } else {
    var params = lisp[1];
    var name = lisp[0];
    switch (name) {
      case "+" : 
          return binNumOp((function (a, b) {
                        return a + b;
                      }), params);
      case "-" : 
          return binNumOp((function (a, b) {
                        return a - b;
                      }), params);
      case "if" : 
          return if_($$eval, params);
      default:
        throw [
              RuntimeError,
              name + " is not valid procedure"
            ];
    }
  }
}

export {
  showVal ,
  RuntimeError ,
  binNumOp ,
  if_ ,
  $$eval ,
  
}
/* No side effect */
