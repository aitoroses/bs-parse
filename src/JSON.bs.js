// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE

import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_obj from "../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_format from "../node_modules/bs-platform/lib/es6/caml_format.js";
import * as CamlinternalLazy from "../node_modules/bs-platform/lib/es6/camlinternalLazy.js";
import * as Combinators$BsParse from "./Combinators.bs.js";
import * as CommonCombinators$BsParse from "./CommonCombinators.bs.js";

var $$undefined = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.string("undefined"), (function (param) {
        return /* JUndefined */0;
      }));

var $$null = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.string("null"), (function (param) {
        return /* JNull */1;
      }));

var trueBool = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.string("true"), (function (param) {
        return /* JBool */Block.__(2, [true]);
      }));

var falseBool = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.string("false"), (function (param) {
        return /* JBool */Block.__(2, [false]);
      }));

var bools = Curry._2(Combinators$BsParse.$less$pipe$great, trueBool, Block.__(250, [falseBool]));

var quotedString = Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.str, (function (s) {
        return /* JString */Block.__(1, [s]);
      }));

var number = Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.number, (function (numberStr) {
        return /* JNumber */Block.__(0, [Caml_format.caml_float_of_string(numberStr)]);
      }));

var literal = Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, $$undefined, Block.__(250, [$$null])), Block.__(250, [bools])), Block.__(250, [quotedString])), Block.__(250, [number]));

function objectMemberP(expr) {
  return Curry._2(Combinators$BsParse.$great$great$eq, Combinators$BsParse.regex("\"([^\"]*)\"\\s*:\\s*"), (function (captured) {
                return Curry._2(Combinators$BsParse.$less$$great, expr, (function (value) {
                              var key = Caml_array.caml_array_get(captured, 1);
                              return /* tuple */[
                                      key,
                                      value
                                    ];
                            }));
              }));
}

function objP(expr) {
  return Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.surround(Combinators$BsParse.string("{"), Combinators$BsParse.sepBy(Combinators$BsParse.string(","), CommonCombinators$BsParse.spaceAround(objectMemberP(expr))), Combinators$BsParse.string("}")), (function (res) {
                return /* JObject */Block.__(4, [res]);
              }));
}

function arrayP(expr) {
  return Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.surround(Combinators$BsParse.string("["), Combinators$BsParse.sepBy(Combinators$BsParse.string(","), CommonCombinators$BsParse.spaceAround(expr)), Combinators$BsParse.string("]")), (function (res) {
                return /* JArray */Block.__(3, [res]);
              }));
}

var expr = [];

Caml_obj.caml_update_dummy(expr, Block.__(246, [(function (param) {
            return Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, literal, Block.__(246, [(function (param) {
                                  var tag = expr.tag | 0;
                                  return objP(tag === 250 ? expr[0] : (
                                                tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
                                              ));
                                })])), Block.__(246, [(function (param) {
                              var tag = expr.tag | 0;
                              return arrayP(tag === 250 ? expr[0] : (
                                            tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
                                          ));
                            })]));
          })]));

var tag = expr.tag | 0;

var objectMember = objectMemberP(tag === 250 ? expr[0] : (
        tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
      ));

var tag$1 = expr.tag | 0;

var obj = objP(tag$1 === 250 ? expr[0] : (
        tag$1 === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
      ));

var tag$2 = expr.tag | 0;

var array = arrayP(tag$2 === 250 ? expr[0] : (
        tag$2 === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
      ));

function show(json) {
  if (typeof json === "number") {
    if (json === 0) {
      return "undefined";
    } else {
      return "null";
    }
  } else {
    switch (json.tag | 0) {
      case 0 : 
          return json[0].toString();
      case 1 : 
          return "\"" + (json[0] + "\"");
      case 2 : 
          if (json[0]) {
            return "true";
          } else {
            return "false";
          }
      case 3 : 
          return "[" + (json[0].map(show).join(",") + "]");
      case 4 : 
          var memberShow = function (param) {
            var value = show(param[1]);
            return "\"" + (String(param[0]) + ("\":" + (String(value) + "")));
          };
          return "{" + (json[0].map(memberShow).join(",") + "}");
      
    }
  }
}

export {
  $$undefined ,
  $$null ,
  trueBool ,
  falseBool ,
  bools ,
  quotedString ,
  number ,
  literal ,
  objectMemberP ,
  objP ,
  arrayP ,
  expr ,
  objectMember ,
  obj ,
  array ,
  show ,
  
}
/* undefined Not a pure module */
