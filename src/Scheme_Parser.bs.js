// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE

import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_obj from "../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Caml_format from "../node_modules/bs-platform/lib/es6/caml_format.js";
import * as CamlinternalLazy from "../node_modules/bs-platform/lib/es6/camlinternalLazy.js";
import * as Combinators$BsParse from "./Combinators.bs.js";
import * as CommonCombinators$BsParse from "./CommonCombinators.bs.js";

var trueBool = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.string("#t"), (function (param) {
        return /* True */0;
      }));

var falseBool = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.string("#f"), (function (param) {
        return /* False */1;
      }));

var quotedString = Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.str, (function (s) {
        return /* String */Block.__(2, [s]);
      }));

var number = Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.number, (function (numberStr) {
        return /* Number */Block.__(1, [Caml_format.caml_float_of_string(numberStr)]);
      }));

var atom = Curry._2(Combinators$BsParse.$less$$great, Combinators$BsParse.slice(Combinators$BsParse.regex("[^()][\\S#]*")), (function (v) {
        return /* Atom */Block.__(0, [v]);
      }));

var literal = Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, trueBool, Block.__(250, [falseBool])), Block.__(250, [quotedString])), Block.__(250, [number]));

var openParen = Combinators$BsParse.string("(");

var closeParen = Combinators$BsParse.string(")");

function listR(expr) {
  return Combinators$BsParse.sepBy(CommonCombinators$BsParse.whitespace, expr);
}

function procedureCallR(expr) {
  return Curry._2(Combinators$BsParse.$great$great$eq, openParen, (function (param) {
                return Curry._2(Combinators$BsParse.$great$great$eq, CommonCombinators$BsParse.whitespace, (function (param) {
                              return Curry._2(Combinators$BsParse.$great$great$eq, Combinators$BsParse.slice(atom), (function (iden) {
                                            return Curry._2(Combinators$BsParse.$great$great$eq, CommonCombinators$BsParse.whitespace, (function (param) {
                                                          var tag = expr.tag | 0;
                                                          var expr$1 = tag === 250 ? expr[0] : (
                                                              tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
                                                            );
                                                          return Curry._2(Combinators$BsParse.$great$great$eq, Combinators$BsParse.sepBy(CommonCombinators$BsParse.whitespace, expr$1), (function (value) {
                                                                        return Curry._2(Combinators$BsParse.$great$great$eq, CommonCombinators$BsParse.whitespace, (function (param) {
                                                                                      return Curry._2(Combinators$BsParse.$less$$great, closeParen, (function (param) {
                                                                                                    return /* ProcedureCall */Block.__(4, [
                                                                                                              iden,
                                                                                                              value
                                                                                                            ]);
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function surroundedListR(expr) {
  return Curry._2(Combinators$BsParse.$great$great$eq, openParen, (function (param) {
                return Curry._2(Combinators$BsParse.$great$great$eq, CommonCombinators$BsParse.whitespace, (function (param) {
                              var tag = expr.tag | 0;
                              var expr$1 = tag === 250 ? expr[0] : (
                                  tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
                                );
                              return Curry._2(Combinators$BsParse.$great$great$eq, Combinators$BsParse.sepBy(CommonCombinators$BsParse.whitespace, expr$1), (function (value) {
                                            return Curry._2(Combinators$BsParse.$great$great$eq, CommonCombinators$BsParse.whitespace, (function (param) {
                                                          return Curry._2(Combinators$BsParse.$less$$great, closeParen, (function (param) {
                                                                        return /* List */Block.__(3, [value]);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

var exprR = [];

Caml_obj.caml_update_dummy(exprR, Block.__(246, [(function (param) {
            return Curry._2(Combinators$BsParse.$less$pipe$great, Curry._2(Combinators$BsParse.$less$pipe$great, literal, Block.__(246, [(function (param) {
                                  return procedureCallR(exprR);
                                })])), Block.__(246, [(function (param) {
                              return surroundedListR(exprR);
                            })]));
          })]));

var tag = exprR.tag | 0;

var expr = Curry._2(Combinators$BsParse.$great$great$eq, CommonCombinators$BsParse.spaceAround(tag === 250 ? exprR[0] : (
            tag === 246 ? CamlinternalLazy.force_lazy_block(exprR) : exprR
          )), (function (value) {
        return Curry._2(Combinators$BsParse.$less$$great, CommonCombinators$BsParse.eof, (function (param) {
                      return value;
                    }));
      }));

export {
  trueBool ,
  falseBool ,
  quotedString ,
  number ,
  atom ,
  literal ,
  openParen ,
  closeParen ,
  listR ,
  procedureCallR ,
  surroundedListR ,
  exprR ,
  expr ,
  
}
/* trueBool Not a pure module */
