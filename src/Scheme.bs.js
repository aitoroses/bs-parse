// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Combinators$ReasonSuperTinyCompiler = require("./Combinators.bs.js");
var CommonCombinators$ReasonSuperTinyCompiler = require("./CommonCombinators.bs.js");

var trueBool = Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, Combinators$ReasonSuperTinyCompiler.string("#t"), (function (param) {
        return /* True */0;
      }));

var falseBool = Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, Combinators$ReasonSuperTinyCompiler.string("#f"), (function (param) {
        return /* False */1;
      }));

var quotedString = Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, CommonCombinators$ReasonSuperTinyCompiler.str, (function (s) {
        return /* String */Block.__(2, [s]);
      }));

var number = Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, CommonCombinators$ReasonSuperTinyCompiler.number, (function (numberStr) {
        return /* Number */Block.__(1, [Caml_format.caml_float_of_string(numberStr)]);
      }));

var identifier = Combinators$ReasonSuperTinyCompiler.slice(Combinators$ReasonSuperTinyCompiler.regex("[^()][\\S#]*"));

var literal = Curry._2(Combinators$ReasonSuperTinyCompiler.$less$pipe$great, Curry._2(Combinators$ReasonSuperTinyCompiler.$less$pipe$great, Curry._2(Combinators$ReasonSuperTinyCompiler.$less$pipe$great, trueBool, Block.__(250, [falseBool])), Block.__(250, [quotedString])), Block.__(250, [number]));

var openParen = Combinators$ReasonSuperTinyCompiler.string("(");

var closeParen = Combinators$ReasonSuperTinyCompiler.string(")");

function listR(expr) {
  return Combinators$ReasonSuperTinyCompiler.sepBy(CommonCombinators$ReasonSuperTinyCompiler.whitespace, expr);
}

function procedureCallR(expr) {
  return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, openParen, (function (param) {
                return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, CommonCombinators$ReasonSuperTinyCompiler.whitespace, (function (param) {
                              return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, Combinators$ReasonSuperTinyCompiler.slice(identifier), (function (iden) {
                                            return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, CommonCombinators$ReasonSuperTinyCompiler.whitespace, (function (param) {
                                                          var tag = expr.tag | 0;
                                                          var expr$1 = tag === 250 ? expr[0] : (
                                                              tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
                                                            );
                                                          return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, Combinators$ReasonSuperTinyCompiler.sepBy(CommonCombinators$ReasonSuperTinyCompiler.whitespace, expr$1), (function (value) {
                                                                        return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, CommonCombinators$ReasonSuperTinyCompiler.whitespace, (function (param) {
                                                                                      return Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, closeParen, (function (param) {
                                                                                                    return /* ProcedureCall */Block.__(4, [
                                                                                                              iden,
                                                                                                              value
                                                                                                            ]);
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function surroundedListR(expr) {
  return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, openParen, (function (param) {
                return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, CommonCombinators$ReasonSuperTinyCompiler.whitespace, (function (param) {
                              var tag = expr.tag | 0;
                              var expr$1 = tag === 250 ? expr[0] : (
                                  tag === 246 ? CamlinternalLazy.force_lazy_block(expr) : expr
                                );
                              return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, Combinators$ReasonSuperTinyCompiler.sepBy(CommonCombinators$ReasonSuperTinyCompiler.whitespace, expr$1), (function (value) {
                                            return Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, CommonCombinators$ReasonSuperTinyCompiler.whitespace, (function (param) {
                                                          return Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, closeParen, (function (param) {
                                                                        return /* List */Block.__(3, [value]);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

var exprR = [];

Caml_obj.caml_update_dummy(exprR, Block.__(246, [(function (param) {
            return Curry._2(Combinators$ReasonSuperTinyCompiler.$less$pipe$great, Curry._2(Combinators$ReasonSuperTinyCompiler.$less$pipe$great, literal, Block.__(246, [(function (param) {
                                  return procedureCallR(exprR);
                                })])), Block.__(246, [(function (param) {
                              return surroundedListR(exprR);
                            })]));
          })]));

var tag = exprR.tag | 0;

var expr = Curry._2(Combinators$ReasonSuperTinyCompiler.$great$great$eq, CommonCombinators$ReasonSuperTinyCompiler.spaceAround(tag === 250 ? exprR[0] : (
            tag === 246 ? CamlinternalLazy.force_lazy_block(exprR) : exprR
          )), (function (value) {
        return Curry._2(Combinators$ReasonSuperTinyCompiler.$less$$great, CommonCombinators$ReasonSuperTinyCompiler.eof, (function (param) {
                      return value;
                    }));
      }));

exports.trueBool = trueBool;
exports.falseBool = falseBool;
exports.quotedString = quotedString;
exports.number = number;
exports.identifier = identifier;
exports.literal = literal;
exports.openParen = openParen;
exports.closeParen = closeParen;
exports.listR = listR;
exports.procedureCallR = procedureCallR;
exports.surroundedListR = surroundedListR;
exports.exprR = exprR;
exports.expr = expr;
/* trueBool Not a pure module */
